plugins {
    // This is an application.
    id 'application'
    id 'java-library'

    // Since it's an application, you might want to distribute an executable/installer.
    id 'org.beryx.jlink' version '2.24.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
}

group('io.github.kinsleykajiva')
version('1.0')
def currentOs = org.gradle.internal.os.OperatingSystem.current()
def jdk = 16 ;
def ikonliVersion ='12.3.1';

repositories {
    maven { url 'https://jitpack.io' }
    // Maven Central is used to resolve dependencies.
    mavenCentral()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    constraints {
        implementation 'org.apache.commons:commons-text:1.9'

        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    }
    // Testing is done with the JUnit 5 Testing framework.
    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Since Gradle 6.6, we have to grab javafx dependencies straight from the source.
    // Because JavaFX has specific binaries for each development platform, we need to
    // use the correct ones for our platform.

    def platform = (currentOs.windows ? 'win' : currentOs.linux ? 'linux' : currentOs.macOsX ? 'mac' : '')

    implementation "org.openjfx:javafx-base:${jdk}:${platform}"
    implementation "org.openjfx:javafx-controls:${jdk}:${platform}"
    implementation "org.openjfx:javafx-graphics:${jdk}:${platform}"
    implementation "org.openjfx:javafx-media:${jdk}:${platform}"
    implementation "org.openjfx:javafx-swing:${jdk}:${platform}"
    implementation "org.openjfx:javafx-fxml:16:${platform}"
//    implementation 'com.github.iAmGio:animated:0.5.0'
    implementation 'de.saxsys:mvvmfx:1.8.0'
    implementation 'com.jfoenix:jfoenix:9.0.10'
    api 'io.github.typhon0:AnimateFX:1.2.2-SNAPSHOT'
  //  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.kordamp.ikonli:ikonli-javafx:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-typicons-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-fontawesome-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-material-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-runestroicons-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-icomoon-pack:${ikonliVersion}"
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.mpatric:mp3agic:0.9.1'
    implementation 'com.github.goxr3plus:jaudiotagger:2.2.7'
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.1'
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.14'
//    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.mp4parser:isoparser:1.9.41'
    implementation 'uk.co.caprica:vlcj:4.7.2'
    implementation 'uk.co.caprica:vlcj-javafx:1.0.3'

    //implementation group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.17.0'



    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

//    implementation platform('org.jetbrains.kotlin:kotlin-bom')

}

application {
    // Define the main module and class for the application here.
    // When you change your module name or class name, change it here as well!
    mainModule.set('kinsleykjv')
    mainClass.set('kinsleykjv.Main')
}

// Ensures modules get put on the path correctly
java {
    modularity.inferModulePath.set(true)
}


// Java 16 is a must!
// ...or set your own preferred java version here.
compileJava {
    options.release.set(jdk)
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(jdk)
    }
}


// Unit Testing

import org.gradle.api.internal.tasks.testing.results.DefaultTestResult

// Pretty-prints the results of the testing.
tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {

        def totalTestTime = 0

        afterTest { desc, DefaultTestResult result ->
            totalTestTime += result.endTime - result.startTime
        }

        afterSuite { desc, DefaultTestResult result ->
            if (!desc.parent) { // will match the outermost suite
                def passFailSkip = "${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped"
                def output = "Test Suite Results: ${result.resultType} (${result.testCount} tests, ${passFailSkip}) in ${totalTestTime} ms."
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')

                if (("${result.resultType}" != "SUCCESS")) {
                    System.exit(0)
                }
            }
        }
    }
}


// Packaging

// More information on the jlink plugin: https://badass-jlink-plugin.beryx.org/releases/2.24.0/
jlink {

    def appName = 'basic music player'
    def appDescription = 'this is a media play that plays videos and audio in the same folder by default'

    // Name your icons according to the icon type, such as:
    // (Windows) appIcon_ico.ico
    // (Linux) appIcon_png.png
    // (MacOS) appIcon_icns.icns
    //
    // Then, put your icons in the same directory and set the iconPath below as follows:
    // path/to/appIcon

    def iconPath = 'path/to/appIcon'

    // Makes sure JavaFX gets added
    addExtraDependencies("javafx")

    // Removes all the unnecessary debugging information from the created executable/installer.
    options.addAll('--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages')

    launcher {
        name = appName
        noConsole = true
    }

    jpackage {
        // cross-platform options
        jvmArgs += ['-XX:+CreateCoredumpOnCrash']
        installerOptions += [
                '--description', appDescription,
                '--app-version', project.version
        ]

        // platform-specific options

        if (currentOs.windows) {
            installerType = "msi"
            icon = "${iconPath}_ico.ico"
            icon = "src/main/java/kinsleykjv/icon.ico"

            installerOptions += [
                    '--win-dir-chooser',
                    '--win-shortcut',
            ]
        } else if (currentOs.linux) {
            installerType = "deb"
            icon = "${iconPath}_png.png"

            installerOptions += [
                    '--linux-shortcut'
            ]
        } else if (currentOs.macOsX) {
            installerType = "pkg"
            icon = "${iconPath}_icns.icns"
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "16"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "16"
    }
}

